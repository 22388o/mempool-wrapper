id: mempool
title: Mempool
version: 2.3.1
release-notes: Initial release for Embassy 0.3.0.
license: mit
wrapper-repo: "https://github.com/Start9Labs/mempool-wrapper"
upstream-repo: "https://github.com/mempool/mempool"
support-site: "https://mempool.space/docs/api/rest"
marketing-site: "https://mempool.space/"
donation-url: "https://mempool.space/sponsor"
build: ["make"]
description:
  short: "A Bitcoin node and network visualizer."
  long: "Mempool is the fully featured visualizer, explorer, and API service running on [mempool.space](https://mempool.space/), an open source project developed and operated for the benefit of the Bitcoin community, with a focus on the emerging transaction fee market to help our transition into a multi-layer ecosystem."
assets:
  license: LICENSE
  icon: icon.png
  instructions: docs/instructions.md
  docker-images: image.tar
main:
  type: docker
  image: main
  entrypoint: "docker_entrypoint.sh"
  args: []
  mounts:
    main: /root
    compat: /mnt/assets
  io-format: yaml
health-checks: {}
config:
  get:
    type: docker
    image: compat
    system: true
    entrypoint: compat
    args:
      - config
      - get
      - /root
      - /mnt/assets/config_spec.yaml
    mounts:
      main: /root
      compat: /mnt/assets
    io-format: yaml
  set:
    type: docker
    image: compat
    system: true
    entrypoint: compat
    args:
      - config
      - set
      - mempool
      - /root
      - /mnt/assets/config_rules.yaml
      - /mnt/assets/dependencies.yaml
    mounts:
      main: /root
      compat: /mnt/assets
    io-format: yaml
properties:
  type: docker
  image: compat
  system: true
  entrypoint: compat
  args:
    - properties
    - /root
  mounts:
    main: /root
  io-format: yaml
dependencies:
  btc-rpc-proxy:
    version: ">=0.3.2.1 <0.4.0"
    requirement:
      type: "opt-in"
      how: Can alternatively configure an external bitcoind node.
    description: Used for RPC permissioning.
    config:
      check:
        type: docker
        image: compat
        system: true
        entrypoint: compat
        args:
          - dependency
          - check
          - mempool
          - "btc-rpc-proxy"
          - /root
          - "/mnt/assets/btc-rpc-proxy_config_rules.yaml"
        mounts:
          main: /root
          compat: /mnt/assets
        io-format: yaml
      auto-configure:
        type: docker
        image: compat
        system: true
        entrypoint: compat
        args:
          - dependency
          - "auto-configure"
          - mempool
          - "btc-rpc-proxy"
          - /root
          - "/mnt/assets/btc-rpc-proxy_config_rules.yaml"
        mounts:
          main: /root
          compat: /mnt/assets
        io-format: yaml
  bitcoind:
    version: "^0.21.1.2 <23.0.0"
    requirement:
      type: "opt-in"
      how: Can alternatively configure an external bitcoin node.
    description: Used to subscribe to new block events from a full archival node.
    config:
      check: 
        type: docker
        image: compat
        system: true
        entrypoint: compat
        args:
          - dependency
          - check
          - mempool
          - "bitcoind"
          - /root
          - "/mnt/assets/bitcoind_config_rules.yaml"
        mounts:
          compat: /mnt/assets
          main: /root
      auto-configure:
        type: docker
        image: compat
        system: true
        entrypoint: compat
        args:
          - dependency
          - "auto-configure"
          - mempool
          - "bitcoind"
          - /root
          - "/mnt/assets/bitcoind_config_rules.yaml"
        mounts:
          compat: /mnt/assets
volumes: 
  main:
    type: data 
  compat:
    type: assets
interfaces:
  main:
    name: Mempool Interface
    description: Specifies the mempool interface to listen on for HTTP connections.
    tor-config:
      port-mapping:
        80: "8080"
        443: "443"
        8999 : "8999"
    lan-config:
      443:  
        ssl: true
        internal: 8080
    ui: true
    protocols:
      - tcp
      - http
backup:
  create:
    type: docker
    image: compat
    system: true
    entrypoint: compat
    args:
      - duplicity
      - create
      - /mnt/backup
      - /root
    mounts:
      BACKUP: /mnt/backup
      main: /root
    io-format: yaml
  restore:
    type: docker
    image: compat
    system: true
    entrypoint: compat
    args:
      - duplicity
      - restore
      - /mnt/backup
      - /root
    mounts:
      BACKUP: /mnt/backup
      main: /root
    io-format: yaml